#Дано расстояние L в сантиметрах. Используя операцию деления нацело, найти количество полных метров в нем (1 метр = 100 см).
def full_meters(L):
    return L // 100
if __name__ == "__main__":
    print(f"Полные метры: {full_meters(250)}")

#Дана масса M в килограммах. Используя операцию деления нацело, найти количество полных тонн в ней (1 тонна = 1000 кг).
def full_tons(M):
    return M // 1000
if __name__ == "__main__":
    print(f"Полные тонны: {full_tons(4500)}")

#Дан размер файла в байтах. Используя операцию деления нацело, найти количество полных килобайтов,
# которые занимает данный файл (1 килобайт = 1024 байта).
def full_kilobytes(size_bytes):
    return size_bytes // 1024
if __name__ == "__main__":
    print(f"Полные килобайты: {full_kilobytes(2048)}")

#Даны целые положительные числа A и B (A > B). На отрезке длины A
# размещено максимально возможное количество отрезков длины B (без наложений).
# Используя операцию деления нацело, найти количество отрезков B, размещенных на отрезке A.
def segments_count(A, B):
    return A // B
if __name__ == "__main__":
    print(f"Количество отрезков B на отрезке A: {segments_count(100, 30)}")

#Даны целые положительные числа A и B (A > B). На отрезке длины A размещено максимально возможное
# количество отрезков длины B (без наложений).
# Используя операцию взятия остатка от деления нацело, найти длину незанятой части отрезка A.
def remaining_length(A, B):
    return A % B
if __name__ == "__main__":
    print(f"Длина незанятой части отрезка A: {remaining_length(100, 30)}")

#Дано двузначное число. Вывести вначале его левую цифру (десятки), а затем — его правую цифру (единицы).
# Для нахождения десятков использовать операцию деления нацело, для нахождения единиц —
# операцию взятия остатка от деления.
def digits_number(number):
    tens = number // 10
    ones = number % 10
    return tens, ones
if __name__ == "__main__":
    tens, ones = digits_number(45)
    print(f"Десятки: {tens}, Единицы: {ones}")

#Дано двузначное число. Найти сумму и произведение его цифр.
def sum_product_digits(number):
    tens = number // 10
    ones = number % 10
    return tens + ones, tens * ones
if __name__ == "__main__":
    print(f"Сумма и произведение цифр: {sum_product_digits(45)}")

#Дано двузначное число. Вывести число, полученное при перестановке цифр исходного числа.
def swap_digits(number):
    tens = number // 10
    ones = number % 10
    return ones * 10 + tens
if __name__ == "__main__":
    print("Число с переставленными цифрами:", swap_digits(45))

#Дано трехзначное число. Используя одну операцию деления нацело, вывести первую цифру данного числа (сотни).
def first_digit_of_three_digit_number(number):
    return number // 100
if __name__ == "__main__":
    print(f"Первая цифра трехзначного числа: {first_digit_of_three_digit_number(654)}")

#Дано трехзначное число. Вывести вначале его последнюю цифру (единицы), а затем — его среднюю цифру (десятки).
def last_and_middle_digits(number):
    ones = number % 10 #Modulus
    tens = (number // 10) % 10
    return ones, tens
if __name__ == "__main__":
    print("Последняя и средняя цифры:", last_and_middle_digits(456))
